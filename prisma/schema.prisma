generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  shortenedUrls ShortenedUrl[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// SillyLink model
model ShortenedUrl {
  id        String   @id @default(cuid())
  longUrl   String   @db.Text
  shortCode String   @unique
  clicks    Int      @default(0)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
  referrals Json?    // Stores referral sources, e.g., { "Social Media": 10, "Direct": 5 }

  @@index([shortCode]) // Index for faster lookups
}

model MetricsSnapshot {
  id            String   @id @default(uuid())
  userId        String
  totalUrls     Int
  totalClicks   Int
  averageClicks Float
  createdAt     DateTime @default(now())
}